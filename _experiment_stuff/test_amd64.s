//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0405030401020001
DATA LCDATA1<>+0x008(SB)/8, $0x0a0b090a07080607
DATA LCDATA1<>+0x010(SB)/8, $0x0fc0fc000fc0fc00
DATA LCDATA1<>+0x018(SB)/8, $0x0fc0fc000fc0fc00
DATA LCDATA1<>+0x020(SB)/8, $0x0400004004000040
DATA LCDATA1<>+0x028(SB)/8, $0x0400004004000040
DATA LCDATA1<>+0x030(SB)/8, $0x003f03f0003f03f0
DATA LCDATA1<>+0x038(SB)/8, $0x003f03f0003f03f0
DATA LCDATA1<>+0x040(SB)/8, $0x0100001001000010
DATA LCDATA1<>+0x048(SB)/8, $0x0100001001000010
DATA LCDATA1<>+0x050(SB)/8, $0x3333333333333333
DATA LCDATA1<>+0x058(SB)/8, $0x3333333333333333
DATA LCDATA1<>+0x060(SB)/8, $0x1919191919191919
DATA LCDATA1<>+0x068(SB)/8, $0x1919191919191919
DATA LCDATA1<>+0x070(SB)/8, $0xfcfcfcfcfcfc4741
DATA LCDATA1<>+0x078(SB)/8, $0x0000f0edfcfcfcfc
GLOBL LCDATA1<>(SB), 8, $128

DATA LCDATA2<>+0x000(SB)/8, $0x2f2f2f2f2f2f2f2f
DATA LCDATA2<>+0x008(SB)/8, $0x2f2f2f2f2f2f2f2f
DATA LCDATA2<>+0x010(SB)/8, $0x0804080402011010
DATA LCDATA2<>+0x018(SB)/8, $0x1010101010101010
DATA LCDATA2<>+0x020(SB)/8, $0x1111111111111115
DATA LCDATA2<>+0x028(SB)/8, $0x1a1b1b1b1a131111
DATA LCDATA2<>+0x030(SB)/8, $0xb9b9bfbf04131000
DATA LCDATA2<>+0x038(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x040(SB)/8, $0x0140014001400140
DATA LCDATA2<>+0x048(SB)/8, $0x0140014001400140
DATA LCDATA2<>+0x050(SB)/8, $0x0001100000011000
DATA LCDATA2<>+0x058(SB)/8, $0x0001100000011000
DATA LCDATA2<>+0x060(SB)/8, $0x090a040506000102
DATA LCDATA2<>+0x068(SB)/8, $0x808080800c0d0e08
GLOBL LCDATA2<>(SB), 8, $112

DATA LCDATA1<>+0x000(SB)/8, $0x0405030401020001
DATA LCDATA1<>+0x008(SB)/8, $0x0a0b090a07080607
DATA LCDATA1<>+0x010(SB)/8, $0x0fc0fc000fc0fc00
DATA LCDATA1<>+0x018(SB)/8, $0x0fc0fc000fc0fc00
DATA LCDATA1<>+0x020(SB)/8, $0x0400004004000040
DATA LCDATA1<>+0x028(SB)/8, $0x0400004004000040
DATA LCDATA1<>+0x030(SB)/8, $0x003f03f0003f03f0
DATA LCDATA1<>+0x038(SB)/8, $0x003f03f0003f03f0
DATA LCDATA1<>+0x040(SB)/8, $0x0100001001000010
DATA LCDATA1<>+0x048(SB)/8, $0x0100001001000010
DATA LCDATA1<>+0x050(SB)/8, $0x3333333333333333
DATA LCDATA1<>+0x058(SB)/8, $0x3333333333333333
DATA LCDATA1<>+0x060(SB)/8, $0x1919191919191919
DATA LCDATA1<>+0x068(SB)/8, $0x1919191919191919
DATA LCDATA1<>+0x070(SB)/8, $0xfcfcfcfcfcfc4741
DATA LCDATA1<>+0x078(SB)/8, $0x0000f0edfcfcfcfc
GLOBL LCDATA1<>(SB), 8, $128

TEXT ·_base64_stream_encode_avx(SB), $0-40

    MOVQ base64_state+0(FP), DI
    MOVQ src+8(FP), SI
    MOVQ srclen+16(FP), DX
    MOVQ out+24(FP), CX
    MOVQ outlen+32(FP), R8
    LEAQ LCDATA1<>(SB), BP

                                 // mov	r10d, dword [rdi + 4]
                                 // mov	r9b, byte [rdi + 12]
                                 // xor	r11d, r11d
                                 // cmp	r10d, 2
	JE LBB0_12
                                 // cmp	r10d, 1
	JE LBB0_7
                                 // test	r10d, r10d
	JNE LBB0_14
                                 // cmp	rdx, 16
	JB LBB0_9
LBB0_4:
                                 // vmovdqa	xmm8, oword 0[rbp] /* [rip + .LCPI0_0] */
                                 // vmovdqa	xmm9, oword 16[rbp] /* [rip + .LCPI0_1] */
                                 // vmovdqa	xmm10, oword 32[rbp] /* [rip + .LCPI0_2] */
                                 // vmovdqa	xmm3, oword 48[rbp] /* [rip + .LCPI0_3] */
                                 // vmovdqa	xmm4, oword 64[rbp] /* [rip + .LCPI0_4] */
                                 // vmovdqa	xmm5, oword 80[rbp] /* [rip + .LCPI0_5] */
                                 // vmovdqa	xmm6, oword 96[rbp] /* [rip + .LCPI0_6] */
                                 // vmovdqa	xmm7, oword 112[rbp] /* [rip + .LCPI0_7] */
LBB0_5:
                                 // vmovdqu	xmm0, oword [rsi]
                                 // vpshufb	xmm0, xmm0, xmm8
                                 // vpand	xmm1, xmm0, xmm9
                                 // vpmulhuw	xmm1, xmm1, xmm10
                                 // vpand	xmm0, xmm0, xmm3
                                 // vpmullw	xmm0, xmm0, xmm4
                                 // vpor	xmm0, xmm0, xmm1
                                 // vpsubusb	xmm1, xmm0, xmm5
                                 // vpcmpgtb	xmm2, xmm0, xmm6
                                 // vpsubb	xmm1, xmm1, xmm2
                                 // vpshufb	xmm1, xmm7, xmm1
                                 // vpaddb	xmm0, xmm1, xmm0
                                 // vmovdqu	oword [rcx], xmm0
                                 // add	rsi, 12
                                 // add	rcx, 16
                                 // add	r11, 16
                                 // add	rdx, -12
                                 // cmp	rdx, 15
	JA LBB0_5
LBB0_6:
                                 // add	rdx, -1
                                 // mov	al, byte [rsi]
                                 // shr	al, 2
                                 // movzx	eax, al
                                 // mov	al, byte [rax + base64_table_enc]
                                 // mov	byte [rcx], al
                                 // add	rcx, 1
                                 // mov	r9b, byte [rsi]
                                 // add	rsi, 1
                                 // shl	r9b, 4
                                 // and	r9b, 48
                                 // add	r11, 1
LBB0_7:
                                 // test	rdx, rdx
	JE LBB0_8
                                 // add	rdx, -1
                                 // mov	al, byte [rsi]
                                 // shr	al, 4
                                 // or	al, r9b
                                 // movzx	eax, al
                                 // mov	al, byte [rax + base64_table_enc]
                                 // mov	byte [rcx], al
                                 // add	rcx, 1
                                 // mov	r9b, byte [rsi]
                                 // add	rsi, 1
                                 // shl	r9b, 2
                                 // and	r9b, 60
                                 // add	r11, 1
LBB0_12:
                                 // test	rdx, rdx
	JE LBB0_13
                                 // add	rdx, -1
                                 // mov	al, byte [rsi]
                                 // shr	al, 6
                                 // or	al, r9b
                                 // movzx	eax, al
                                 // mov	al, byte [rax + base64_table_enc]
                                 // mov	byte [rcx], al
                                 // movzx	eax, byte [rsi]
                                 // add	rsi, 1
                                 // and	eax, 63
                                 // mov	al, byte [rax + base64_table_enc]
                                 // mov	byte [rcx + 1], al
                                 // add	rcx, 2
                                 // add	r11, 2
                                 // cmp	rdx, 16
	JAE LBB0_4
LBB0_9:
                                 // test	rdx, rdx
	JNE LBB0_6
                                 // xor	r10d, r10d
	JMP LBB0_14
LBB0_8:
                                 // mov	r10d, 1
	JMP LBB0_14
LBB0_13:
                                 // mov	r10d, 2
LBB0_14:
                                 // mov	dword [rdi + 4], r10d
                                 // mov	byte [rdi + 12], r9b
                                 // mov	qword [r8], r11
    RET




DATA LCDATA2<>+0x000(SB)/8, $0x2f2f2f2f2f2f2f2f
DATA LCDATA2<>+0x008(SB)/8, $0x2f2f2f2f2f2f2f2f
DATA LCDATA2<>+0x010(SB)/8, $0x0804080402011010
DATA LCDATA2<>+0x018(SB)/8, $0x1010101010101010
DATA LCDATA2<>+0x020(SB)/8, $0x1111111111111115
DATA LCDATA2<>+0x028(SB)/8, $0x1a1b1b1b1a131111
DATA LCDATA2<>+0x030(SB)/8, $0xb9b9bfbf04131000
DATA LCDATA2<>+0x038(SB)/8, $0x0000000000000000
DATA LCDATA2<>+0x040(SB)/8, $0x0140014001400140
DATA LCDATA2<>+0x048(SB)/8, $0x0140014001400140
DATA LCDATA2<>+0x050(SB)/8, $0x0001100000011000
DATA LCDATA2<>+0x058(SB)/8, $0x0001100000011000
DATA LCDATA2<>+0x060(SB)/8, $0x090a040506000102
DATA LCDATA2<>+0x068(SB)/8, $0x808080800c0d0e08
GLOBL LCDATA2<>(SB), 8, $112

TEXT ·_base64_stream_decode_avx(SB), $0-40

    MOVQ base64_state+0(FP), DI
    MOVQ src+8(FP), SI
    MOVQ srclen+16(FP), DX
    MOVQ out+24(FP), CX
    MOVQ outlen+32(FP), R8
    LEAQ LCDATA2<>(SB), BP

                                 // mov	eax, dword [rdi]
                                 // test	eax, eax
	JE LBB1_4
                                 // mov	qword [r8], 0
                                 // xor	ebx, ebx
                                 // test	rdx, rdx
	JE LBB1_43
                                 // cmp	eax, 1
	JNE LBB1_43
                                 // mov	qword [rdi], 2
                                 // movzx	eax, byte [rsi]
                                 // cmp	byte [rax + base64_table_dec], -2
                                 // sete	al
                                 // cmp	rdx, 1
                                 // sete	bl
                                 // and	bl, al
	JMP LBB1_43
LBB1_4:
                                 // mov	r11d, dword [rdi + 4]
                                 // mov	r9b, byte [rdi + 12]
                                 // xor	r10d, r10d
                                 // cmp	r11d, 1
	JG LBB1_14
                                 // test	r11d, r11d
	JE LBB1_6
                                 // mov	eax, 0
                                 // cmp	r11d, 1
	JNE LBB1_17
                                 // mov	r11d, 1
                                 // test	rdx, rdx
	JE LBB1_24
LBB1_25:
                                 // movzx	ebx, byte [rsi]
                                 // mov	r14b, byte [rbx + base64_table_dec]
                                 // cmp	r14b, -3
	JA LBB1_26
                                 // add	rdx, -1
                                 // mov	ebx, r14d
                                 // shr	bl, 4
                                 // or	bl, r9b
                                 // mov	byte [rcx], bl
                                 // add	rsi, 1
                                 // add	rcx, 1
                                 // shl	r14b, 4
                                 // add	rax, 1
                                 // mov	r9d, r14d
                                 // mov	r14, rdx
                                 // mov	bl, 1
                                 // test	r14, r14
	JNE LBB1_30
LBB1_29:
                                 // mov	r11d, 2
	JMP LBB1_42
LBB1_14:
                                 // cmp	r11d, 2
	JE LBB1_15
                                 // mov	eax, 0
                                 // cmp	r11d, 3
	JNE LBB1_17
                                 // test	rdx, rdx
	JE LBB1_38
LBB1_39:
                                 // add	rdx, -1
                                 // movzx	ebx, byte [rsi]
                                 // mov	bl, byte [rbx + base64_table_dec]
                                 // cmp	bl, -2
	JB LBB1_44
                                 // sete	cl
                                 // test	rdx, rdx
	JMP LBB1_41
LBB1_6:
                                 // xor	eax, eax
                                 // cmp	rdx, 24
	JAE LBB1_8
	JMP LBB1_11
LBB1_15:
                                 // xor	eax, eax
                                 // mov	r14, rdx
                                 // mov	bl, 1
                                 // test	r14, r14
	JE LBB1_29
LBB1_30:
                                 // lea	rdx, [r14 - 1]
                                 // movzx	r11d, byte [rsi]
                                 // add	rsi, 1
                                 // mov	r15b, byte [r11 + base64_table_dec]
                                 // cmp	r15b, -2
	JB LBB1_36
                                 // mov	r11d, 3
                                 // xor	r10d, r10d
                                 // cmp	r15b, -2
	JNE LBB1_32
                                 // test	rdx, rdx
	JE LBB1_34
                                 // movzx	ecx, byte [rsi]
                                 // cmp	byte [rcx + base64_table_dec], -2
                                 // sete	cl
                                 // cmp	r14, 2
LBB1_41:
                                 // sete	bl
                                 // and	bl, cl
                                 // xor	r11d, r11d
                                 // mov	r10d, 2
	JMP LBB1_42
LBB1_17:
                                 // xor	eax, eax
                                 // xor	ebx, ebx
	JMP LBB1_42
LBB1_44:
                                 // or	bl, r9b
                                 // mov	byte [rcx], bl
                                 // add	rsi, 1
                                 // add	rcx, 1
                                 // add	rax, 1
                                 // xor	r9d, r9d
                                 // cmp	rdx, 24
	JB LBB1_11
LBB1_8:
                                 // vmovdqa	xmm0, oword 0[rbp] /* [rip + .LCPI1_0] */
                                 // vmovdqa	xmm8, oword 16[rbp] /* [rip + .LCPI1_1] */
                                 // vmovdqa	xmm10, oword 32[rbp] /* [rip + .LCPI1_2] */
                                 // vpxor	xmm12, xmm12, xmm12
                                 // vmovdqa	xmm9, oword 0[rbp] /* [rip + .LCPI1_0] */
                                 // vmovdqa	xmm11, oword 48[rbp] /* [rip + .LCPI1_3] */
                                 // vmovdqa	xmm6, oword 64[rbp] /* [rip + .LCPI1_4] */
                                 // vmovdqa	xmm7, oword 80[rbp] /* [rip + .LCPI1_5] */
                                 // vmovdqa	xmm1, oword 96[rbp] /* [rip + .LCPI1_6] */
LBB1_9:
                                 // vmovdqu	xmm4, oword [rsi]
                                 // vpsrld	xmm2, xmm4, 4
                                 // vpand	xmm2, xmm2, xmm0
                                 // vpshufb	xmm5, xmm8, xmm2
                                 // vpand	xmm3, xmm4, xmm0
                                 // vpshufb	xmm3, xmm10, xmm3
                                 // vpand	xmm3, xmm3, xmm5
                                 // vpcmpgtb	xmm3, xmm3, xmm12
                                 // vpmovmskb	ebx, xmm3
                                 // test	ebx, ebx
	JNE LBB1_19
                                 // vpcmpeqb	xmm3, xmm4, xmm9
                                 // vpaddb	xmm2, xmm2, xmm3
                                 // vpshufb	xmm2, xmm11, xmm2
                                 // vpaddb	xmm2, xmm2, xmm4
                                 // vpmaddubsw	xmm2, xmm2, xmm6
                                 // vpmaddwd	xmm2, xmm2, xmm7
                                 // vpshufb	xmm2, xmm2, xmm1
                                 // vmovdqu	oword [rcx], xmm2
                                 // add	rsi, 16
                                 // add	rcx, 12
                                 // add	rax, 12
                                 // add	rdx, -16
                                 // cmp	rdx, 23
	JA LBB1_9
LBB1_11:
                                 // test	rdx, rdx
	JE LBB1_12
                                 // mov	bl, byte [rsi]
                                 // movzx	ebx, bl
                                 // mov	bl, byte [rbx + base64_table_dec]
                                 // cmp	bl, -3
	JBE LBB1_22
LBB1_21:
                                 // xor	r11d, r11d
LBB1_26:
                                 // mov	r10d, 2
                                 // xor	ebx, ebx
	JMP LBB1_42
LBB1_36:
                                 // mov	ebx, r15d
                                 // shr	bl, 2
                                 // or	bl, r9b
                                 // mov	byte [rcx], bl
                                 // add	rcx, 1
                                 // shl	r15b, 6
                                 // add	rax, 1
                                 // mov	r9d, r15d
                                 // test	rdx, rdx
	JNE LBB1_39
LBB1_38:
                                 // mov	bl, 1
                                 // mov	r11d, 3
	JMP LBB1_42
LBB1_12:
                                 // mov	bl, 1
                                 // xor	r10d, r10d
                                 // xor	r11d, r11d
	JMP LBB1_42
LBB1_19:
                                 // vpextrb	ebx, xmm4, 0
                                 // movzx	ebx, bl
                                 // mov	bl, byte [rbx + base64_table_dec]
                                 // cmp	bl, -3
	JA LBB1_21
LBB1_22:
                                 // add	rdx, -1
                                 // add	rsi, 1
                                 // shl	bl, 2
                                 // mov	r9d, ebx
                                 // mov	r11d, 1
                                 // test	rdx, rdx
	JNE LBB1_25
LBB1_24:
                                 // mov	bl, 1
	JMP LBB1_42
LBB1_32:
                                 // xor	ebx, ebx
	JMP LBB1_42
LBB1_34:
                                 // mov	r10d, 1
LBB1_42:
                                 // mov	dword [rdi], r10d
                                 // mov	dword [rdi + 4], r11d
                                 // mov	byte [rdi + 12], r9b
                                 // mov	qword [r8], rax
LBB1_43:
                                 // movzx	eax, bl
    RET
